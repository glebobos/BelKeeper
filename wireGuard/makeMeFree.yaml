AWSTemplateFormatVersion: '2010-09-09'
Description: 'WireGuard VPN Server Setup'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the WireGuard server will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet IDs for the Auto Scaling group

  WireGuardPort:
    Type: Number
    Default: 51820
    Description: Port for WireGuard VPN
  Environment:
    Type: String
    Default: free
    Description: Environment name
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2'

Resources:
  WireGuardSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for WireGuard VPN
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: !Ref WireGuardPort
          ToPort: !Ref WireGuardPort
          CidrIp: 0.0.0.0/0

  WireGuardInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WireGuardInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WireGuardInstanceRole

  WireGuardLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          HttpEndpoint: enabled
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt WireGuardInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WireGuardSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            set -ex
            # Update and install
            yum update -y
            amazon-linux-extras install epel -y
            yum install -y wireguard-dkms wireguard-tools qrencode

            # Enable IP forwarding
            echo "net.ipv4.ip_forward = 1" | tee -a /etc/sysctl.conf
            sysctl -p

            # Generate keys
            server_private_key=$(wg genkey)
            server_public_key=$(echo "$server_private_key" | wg pubkey)
            client_private_key=$(wg genkey)
            client_public_key=$(echo "$client_private_key" | wg pubkey)
            preshared_key=$(wg genpsk)

            # Set custom port
            custom_port=${WireGuardPort}

            # Create server config
            tee /etc/wireguard/wg0.conf > /dev/null <<EOT
            [Interface]
            PrivateKey = $server_private_key
            Address = 10.0.0.1/24
            ListenPort = $custom_port
            PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
            PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

            [Peer]
            PublicKey = $client_public_key
            PresharedKey = $preshared_key
            AllowedIPs = 10.0.0.2/32
            EOT

            chmod 600 /etc/wireguard/wg0.conf

            # Enable and start WireGuard
            systemctl enable wg-quick@wg0
            systemctl start wg-quick@wg0

            # Get the instance's public DNS name
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            server_dns_name=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/public-hostname)
            # Create client config
            client_config="[Interface]
            PrivateKey = $client_private_key
            Address = 10.0.0.2/32
            DNS = 8.8.8.8, 8.8.4.4

            [Peer]
            PublicKey = $server_public_key
            PresharedKey = $preshared_key
            AllowedIPs = 0.0.0.0/0
            Endpoint = $server_dns_name:$custom_port
            PersistentKeepalive = 25"

            echo "$client_config" > /tmp/client_wg0.conf
            chmod 644 /tmp/client_wg0.conf

            # Generate QR code and save as PNG
            qrencode -t png -o /tmp/wireguard_config_qr.png < /tmp/client_wg0.conf

            # Firewall configuration
            iptables -A INPUT -p udp --dport $custom_port -j ACCEPT
            iptables -A INPUT -i wg0 -j ACCEPT
            iptables -A FORWARD -i wg0 -j ACCEPT
            iptables -A FORWARD -o wg0 -j ACCEPT

            echo "WireGuard installation and configuration completed."

  WireGuardAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref WireGuardLaunchTemplate
        Version: !GetAtt WireGuardLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0

Outputs:
  AutoScalingGroupName:
    Description: Name of the Auto Scaling group
    Value: !Ref WireGuardAutoScalingGroup